def checkViniPuh(str):
    str = str.split()
    if len(str) == 1: return print("Количество фраз должно быть больше одной!")
    list_a = []
    for i in str:
        count = 0
        for j in i:
            if j in ['а', 'у', 'о', 'ы', 'э', 'я', 'ю', 'ё', 'и', 'е']: count += 1
        list_a.append(count)
    for k in range(0, len(list_a)-1):
        if list_a[k] != list_a[k+1]: return print("Пам парам")
    print("Парам пам-пам")

20:17
Владислав Липкин
def honey_boy(row):
    
    letters = 'уеыаоэяию'
    str_split = list(map(lambda x: x.split("-"), row.split(" ")))
    result = []
    for phrase in str_split:
        count = 0
        for let in list("".join(phrase)):
            if let in letters:
                count+=1
        result.append(count)
    
    
    if len(result) == 1:
        print("Количество фраз должно быть больше одной!")
    else:  
        if sum(result) / len(result) == result[0]:
            print("Парам пам-пам")
        else:
            print("Пам парам")
    
honey_boy(stroka)

----------------------------------------

Задача No49. Решение в группах
Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. 
Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты.
Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел - 
полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. 
Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь. 
Гарантируется, что самая далекая планета ровно одна
Пример ввода и вывода данных представлены на следующем слайде
20 минут
    
Семинар 7. Функции высшего порядка
Задача No49. Решение в группах
Ввод:
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] print(*find_farthest_orbit(orbits))
Вывод:
2.5 10

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (40, 40)]

def find_farthest_orbit(orb):
   orb = list(filter(lambda x: x[0] != x[1], orb))
   print(orb)
   for i in orb:
      if i[0] * i[1] == max(list(map(lambda x: x[0] * x[1], orb))):
        return i

print(find_farthest_orbit(orbits))

print(max(orbits, key = lambda x: x[0] * x[1] * (x[0] != x[1])))



ef show_menu():
    print("Телефонный справочник:")
    print(  "1. Распечатать справочник",
            "2. Найти телефон по фамилии",
            "3. Изменить номер телефона",
            "4. Удалит запись",
            "5. Найти абонента по номеру телефону",
            "6. Добавить абонента в справочник",
            "7. Закончить работу ", sep="\n",)
    choice = int(input("Введите номер строки меню: " ))
    #print  ("Меню: ", choice)
    return choice
#------------------------------------------        
def work_with_phonebook ():
    choice = show_menu()
    print ("Вы выбрали  меню: ", choice)

#-------------------------------------------------------
    phone_book = open('phonebook.txt', mode='rt') #открытие файла
    #print(phone_book.read()) 
    # phone_book.close()
    
    while (choice!=7):
            if choice==1:
                print("-----------------------")
                print("Телефонный справочник:")  
                print( phone_book.read())  
                print("-----------------------")
                phone_book.close() 
                #choice = show_menu()
                work_with_phonebook ()
            elif choice==2:
                last_name= input('Поиск по Фамилии ')
                #print(find_by_lastname, (phone_book, last_name))
                read_txt()
                print(find_by_lastname, (phone_book, last_name))
                phone_book.close() 
            elif choice==3:
                last_name= input('lastname ')
                new_number = input("new_number")
                print(change_number(phone_book, last_name, new_number))
            elif choice==4:
                lastname=input('lastname ')
                print (delete_by_lastname(phone_book, last_name))
            elif choice==5:
                number=input('number ')
                print (find_by_number (phone_book, number))
            elif choice==6:
                user_data=input("new data ")
                add_user (phone_book, user_data)
                write_txt('phonebook.txt, phone_book ')  
               
#--------------------------------------------   
#Lne_book = open('phonebook.txt', mode='rt') #открытие файла
    # phone_book = open('phonebook.txt', 'r') #открытие файла
    # print(phone_book.read()) 
    # phone_book.close()
def read_txt (phone_book):
    phone_book [filds]
    filds = ["Фамилия", "Имя", "Телефон", "Примечания"]

work_with_phonebook ()

